package com.mycompany.myGpa;

import com.codename1.components.InfiniteProgress;
import com.codename1.components.SpanLabel;
import static com.codename1.ui.CN.*;
import com.codename1.io.Log;
import com.codename1.ui.Button;
import com.codename1.ui.Display;
import com.codename1.ui.FontImage;
import com.codename1.ui.Form;
import com.codename1.ui.Dialog;
import com.codename1.ui.Label;
import com.codename1.ui.animations.CommonTransitions;
import com.codename1.ui.layouts.BorderLayout;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.ui.layouts.FlowLayout;
import com.codename1.ui.layouts.LayeredLayout;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.ui.util.UITimer;
import java.io.IOException;
import com.codename1.ui.Toolbar;
import com.codename1.io.NetworkEvent;
import com.codename1.ui.Component;
import static com.codename1.ui.ComponentSelector.$;
import com.codename1.ui.Container;
import com.codename1.ui.TextArea;
import com.codename1.ui.TextField;
import com.codename1.ui.events.ActionEvent;
import com.codename1.ui.events.ActionListener;
import com.codename1.ui.events.DataChangedListener;
import static com.codename1.ui.layouts.BoxLayout.x;
import com.codename1.ui.layouts.Layout;
import com.codename1.ui.table.DefaultTableModel;
import com.codename1.ui.table.Table;
import com.codename1.ui.table.TableLayout;
import com.codename1.ui.table.TableModel;
import com.codename1.ui.validation.Constraint;
import com.codename1.ui.validation.GroupConstraint;
import com.codename1.ui.validation.LengthConstraint;
import com.codename1.ui.validation.RegexConstraint;
import com.codename1.ui.validation.Validator;
import java.util.ArrayList;



/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose 
 * of building native mobile applications using Java.
 */
public class MyApplication {

    private Form current;
    private Resources theme;
    TableModel model;    
    Table table;    
    Form sem1;
    Form result;
    Container content;
    CGpa gp1 = new CGpa();
    CGpa gp = new CGpa();
    Button calc,add,ex;
    session sem;
    boolean x=true;
    Validator val;
    Label error;
    InfiniteProgress progress;
    
    public void init(Object context) {
        // use two network threads instead of one
        updateNetworkThreadCount(2);

        theme = UIManager.initFirstTheme("/theme");

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature
        Log.bindCrashProtection(true);

        addNetworkErrorListener(err -> {
            // prevent the event from propagating
            err.consume();
            if(err.getError() != null) {
                Log.e(err.getError());
            }
            Log.sendLogAsync();
            Dialog.show("Connection Error", "There was a networking error in the connection to " + err.getConnectionRequest().getUrl(), "OK", null);
        });      
        
    }
    
    public void result(){
        Label first = new Label("COMPILED");
        first.setGap(TOP);
        first.animate();
        $(first).fadeInAndWait(2000);
        TextArea disp = new TextArea();
//        disp.setInlineAllStyles("font:2.0mm; bgColor:6baeff; fgColor:f7fefb;");
        sem1 = new Form("RESULT",new BorderLayout());
        disp.setText(" CGPA: "+gp.gpCompiler(gp.grade)+"\n"+
                " GRADE LEVEL: "+gp.getLevel(gp.gpCompiler(gp.grade)));
        disp.setPreferredSizeStr("123.809525mm 10.0mm");
        disp.setEditable(false);
        disp.setRTL(false);
        disp.setHint("here");
//        disp.setText("el practiso fjjd hddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddjjdjd ddjjjj   ");
        disp.setInlineStylesTheme(com.codename1.ui.util.Resources.getGlobalResources());
        disp.setInlineAllStyles("font:2.5mm native:MainBold native:MainBold; border:roundRect stroke(0.1mm 37000000) -top-left +top-right -bottom-left +bottom-right 2.0mm; bgColor:f7fefb; fgColor:20101; transparency:255; opacity:223; bgType:none; bgImage:; alignment:left;");
        disp.setName("display");
        disp.setMaxSize(124000);
        disp.setColumns(10);
        disp.setRows(5);
        disp.setConstraint(com.codename1.ui.TextArea.NON_PREDICTIVE);

//        sem1.add(NORTH,first);
        sem1.add(NORTH,disp);
        sem1.getToolbar().setBackCommand("", f -> layout());
        sem1.show();
        
    }
    
    public void layout(){
        calc = new Button();
        add= new Button();
        ex= new Button("Remove");
        progress = new InfiniteProgress();
        add.setText("ADD");
        calc.setText("Calculate");
        
        sem1 = new Form("RESULT",new BorderLayout());
        content = new Container();
        error = new Label("\n");
        error.setInlineStylesTheme(com.codename1.ui.util.Resources.getGlobalResources());
        
        error.setEndsWith3Points(true);
        error.setInlineAllStyles("font:2.0mm native:ItalicLight native:ItalicLight; fgColor:fe2e2a; ");
        Label second = new Label("2nd SEMSTER");
        
        
       // sem.semester.get(0).addit();
       
       try{
       // TableModel model = null; 
       model = new DefaultTableModel(new String[] {"CourseCode       ","Unit","Grade"},
                 sem.semester.get(0).toTable())
            {
//              public boolean isCellEditable(int row,int col){
//                  return col!=0;
//              }
              
             Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Character.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
            };
      
        table = new Table(model)
        {  
            @Override 
            protected Component createCell(Object value,int row,int column,boolean editable){
                TextArea ta = new TextArea((String) value);
                ta.setInlineAllStyles("font:1.7mm native:ItalicLight native:ItalicLight; bgImage:;");
                ta.setUIID("TableCell");
                return ta;
            }
//            /
//            @Override 
//            protected TableLayout.Constraint createCellConstraint(Object value, int row, int column) {
//                TableLayout.Constraint con = super.createCellConstraint(value, row, column);
//                con.setWidthPercentage(53);
//                return con;
//            }    
        };
      
            val = new Validator();
            val.setShowErrorMessageForFocusedComponent(true);
            val.addConstraint(table, 
                new Constraint() {
           @Override
           public boolean isValid(Object value) {
//               System.out.println("GEngen totoma " + x);
               return x;
           } 

           @Override
           public String getDefaultFailMessage() {
               return "waka jeejee";
           }
       }).addSubmitButtons(add);
        val.bindDataListener(table);
        val.setValidateOnEveryKey(true);
//        table.getModel()
//        content.setInlineAllStyles("font:2.5mm native:MainBold native:MainBold; border:roundRect stroke(0.1mm 37000000) -top-left +top-right -bottom-left +bottom-right 2.0mm; bgColor:f7fefb; fgColor:20101; transparency:255; opacity:223; bgType:none; bgImage:; alignment:left;");
//        sem1.setInlineStylesTheme(com.codename1.ui.util.Resources.getGlobalResources());
//        content.setInlineStylesTheme(com.codename1.ui.util.Resources.getGlobalResources());
//        content.setInlineAllStyles("font:1.5mm native:ItalicThin native:ItalicThin; bgColor:e2d4eb; fgColor:2cfe23; transparency:135; opacity:211; alignment:right;");
        table.setInlineStylesTheme(com.codename1.ui.util.Resources.getGlobalResources());
        content.setLayout(new BoxLayout(BoxLayout.Y_AXIS));
        content.add(table);
        content.add(error);
        Container ney = new Container().add(add).add(ex);
        content.add(ney);
//        content.add(ex);
//        ((com.codename1.ui.layouts.LayeredLayout)table.getParent().getLayout()).setInsets(table, "2.645502mm auto auto 5.8201065mm").setReferenceComponents(table, "-1 -1 -1 -1").setReferencePositions(table, "0.0 0.0 0.0 0.0");
//        ((com.codename1.ui.layouts.LayeredLayout)add.getParent().getLayout()).setInsets(add, "39.473682% auto auto 5.5555573mm").setReferenceComponents(add, "-1 -1 -1 -1").setReferencePositions(add, "0.0 0.0 0.0 0.0");
//        ((com.codename1.ui.layouts.LayeredLayout)content.getLayout()).setPreferredWidthMM((float)117.46032);
//        ((com.codename1.ui.layouts.LayeredLayout)content.getLayout()).setPreferredHeightMM((float)70.37037);
//        ((com.codename1.ui.layouts.LayeredLayout)content.getParent().getLayout()).setInsets(content, "8.730159mm 33.659218% 47.17315% 4.329609%").setReferenceComponents(content, "-1 -1 -1 -1").setReferencePositions(content, "0.0 0.0 0.0 0.0");

//        calc.setVisible(true);
        content.setScrollableY(true);
//        table.setScrollableY(true);
//        calc.setScrollVisible(true);
//        error.setVisible(true);
        $(content).setMargin(2);
        $(table).setFontSize(51);
        $(calc).setMargin(0, 5);
        $(add).set3DTextNorth(true).setPreferredH(27).setFontSize(15);
        $(ex).set3DTextNorth(true).setPreferredH(27).setFontSize(14);
        $(add).setMargin(0, 2);
//        $(ex).setMargin(0, 120);
        sem1.add(CENTER,content);
//        Container ney = new Container();
//        ney.setLayout(new BoxLayout(BoxLayout.Y_AXIS));
//        ney.add(progress).add(calc);
        
//        sem1.add(SOUTH,ney);
        sem1.add(SOUTH,calc);
        
//        table.setScrollVisible(true);
//        sem1.scrollComponentToVisible(table);
//        table.setScrollVisible(true);
//        TableModel model1 = new DefaultTableModel(new String[] {"CourseCode","Unit","Grade"},
//                 sem.semester.get(1).toTable())
//            {
//              public boolean isCellEditable(int row,int col){
//                  return col!=0;
//              }  
//            };
////        table.add((Component) model1);
//        table = new Table(model1);
//        
//        sem1.add(BorderLayout.SOUTH,table);
//        sem1.scrollComponentToVisible(table);
        }catch(Exception e){}
//        model = new DefaultTableModel(new String[] {"CourseCode","Unit","Grade"},
//                sem.semester.get(1).toTable())
//            {
//              public boolean isCellEditable(int row,int col){
//                 / return col!=0;
//              }  
//            };
//        table = new Table(model);
//        sem2.add(BorderLayout.CENTER,table);
//        sem1.setTransitionInAnimator(TransistionAnimation x);
       
//        sem1.setTransitionOutAnimator(null);
        sem1.show();
       
        table.addPointerReleasedListener( new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent evt) {
                x=true;
//                    System.out.println( "Another tbale shii: ");
            }
            
        });
        model.addDataChangeListener(new DataChangedListener(){
            @Override
            public void dataChanged(int type, int index) {
                    x=true;
//                    System.out.println( "table pre model de laalaa: ");
                    error.setVisible(false);
            }
            
        });
        calc.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent evt) {
//                x = false;
            try{
                saveTable();
                progress.setInlineAllStyles(" fgColor:f7fefb;");
                $(progress).setBgTransparency(120);
                $(progress).setMargin(0, 120);
                Dialog c = new Dialog("Please Wait...");
                c.add(progress);
        //        c.showDialog();
                c.setTimeout(2000);
                c.setOpaque(true);
                c.showDialog();

                result();
            }catch(Exception e){
                error.setText("\n"+e.getMessage());
                error.animate();
                $(error).fadeInAndWait(500);
                error.setVisible(true);
            }
               
                System.out.println( "CGPA: "+gp.gpCompiler(gp.grade));
            }
        });
        add.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent evt) {
            saveTable();
            gp.addit(model.getRowCount()+1);
//            content.add(new Button("dfd"));
            table.setDrawBorder(true);
             model = new DefaultTableModel(new String[] {"CourseCode       ","Unit","Grade"},
                 sem.semester.get(0).toTable())
            {
//              public boolean isCellEditable(int row,int col){
//                  return col!=0;
//              }
              
             Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Character.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
            };
      
            table.setModel(model);
            model.addDataChangeListener(new DataChangedListener(){
            @Override
            public void dataChanged(int type, int index) {
//                    System.out.println( "table pre model de laalaa: ");
                    x=true;
            }
            });
//            $(sem1).animateLayout(1000).fadeOutAndWait(500);
//            $(add).setBgTransparency(255);

        
//             System.out.println( sem1.getComponentAt(0).getName() );
//           sem1.show();
             
//            layout();    
            }
        }); 
    }
    
    public Object[][] getTable(){
        String[][] x = new String[table.getModel().getRowCount()][table.getModel().getColumnCount()];
        for(int i=0;i<table.getModel().getRowCount();i++){
            for(int j=0;j<table.getModel().getColumnCount();j++){
                    x[i][j]=(String)table.getModel().getValueAt(i,j);
//                    System.out.println(x[i][j]);
            }
        }
        return x;
        
    }
    
    public boolean tableFilled(){
        for(int i=0;i<getTable().length;i++){
            for(int j=0;j<getTable()[0].length;j++){
                if(getTable()[i][j].toString().length()<1)
                    return false;
            }
        }
        return true;
    }
    
    public void saveTable(){
        ArrayList<Integer> unit = new ArrayList<Integer>(1);
        ArrayList<String> courseCode = new ArrayList<String>(1);
        ArrayList<String> grade = new ArrayList<String>(1);
        
        for(int i=0;i<getTable().length;i++){
            for(int j=0;j<getTable()[0].length;j++){
                if(j==0)
                    courseCode.add(getTable()[i][j].toString().toUpperCase().trim());
                if(j==1)
                    unit.add(Integer.parseInt(getTable()[i][j].toString().trim()));
                if(j==2)
                    grade.add(getTable()[i][j].toString().toUpperCase().trim());
            }
        }
        gp.setCourse(courseCode);
        gp.setGrade(grade);
        gp.setUnit(unit);
        
    }
    
    public void start() {
        if(current != null){
            current.show();
            return;
        }
       sem = new session(100);
        
        gp.addGrade("A");
        gp.addCourse("UCH");
        gp.addUnit(1); 
        
//        gp.addit();
//        gp.addit();
//        gp.addit();
        sem.semester.add(0,gp);
        sem.semester.add(1,gp1);
        
        
        layout();
        
        final Label apple = new Label(theme.getImage("apple-icon.png")); 
        final Label android = new Label(theme.getImage("android-icon.png")); 
        final Label windows = new Label(theme.getImage("windows-icon.png")); 
        Button getStarted = new Button("Let's Get Started!");
        FontImage.setMaterialIcon(getStarted, FontImage.MATERIAL_LINK);
        getStarted.setUIID("GetStarted");
        getStarted.addActionListener((e) -> {
            execute("https://www.codenameone.com/developers.html");
        });
        
        
    }

    public void stop() {
        current = getCurrentForm();
        if(current instanceof Dialog) {
            ((Dialog)current).dispose();
            current = getCurrentForm();
        }
        
    }
    
    public void destroy() {
    }

}
