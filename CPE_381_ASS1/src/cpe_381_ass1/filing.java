
import javax.swing.JOptionPane;
import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardCopyOption;

import javax.swing.JFileChooser;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Hidee
 */
public class filing extends javax.swing.JFrame {
    private File file;
    private int returnVal;
    /**
     * Creates new form filing
     */
    public filing() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        popp = new javax.swing.JPopupMenu();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtArea = new javax.swing.JTextArea();
        delete = new javax.swing.JButton();
        rename = new javax.swing.JButton();
        newName = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        copy = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        open = new javax.swing.JMenuItem();
        exit = new javax.swing.JMenuItem();

        fileChooser.setDialogTitle("OPEN DIALOG");
        fileChooser.setFileFilter(new MyCustomFilter());
        fileChooser.setFileHidingEnabled(true);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(102, 102, 102));
        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(102, 102, 102), new java.awt.Color(0, 0, 0), new java.awt.Color(0, 51, 51), new java.awt.Color(0, 102, 102)));
        jPanel1.setForeground(new java.awt.Color(51, 51, 51));

        txtArea.setEditable(false);
        txtArea.setBackground(new java.awt.Color(204, 204, 204));
        txtArea.setColumns(20);
        txtArea.setFont(new java.awt.Font("Nirmala UI", 1, 14)); // NOI18N
        txtArea.setRows(5);
        txtArea.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED, new java.awt.Color(204, 204, 255), new java.awt.Color(51, 51, 51), null, new java.awt.Color(153, 153, 255)));
        txtArea.setOpaque(false);
        jScrollPane1.setViewportView(txtArea);

        delete.setBackground(new java.awt.Color(102, 102, 255));
        delete.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        delete.setText("DELETE FILE");
        delete.setBorder(rename.getBorder());
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        rename.setBackground(new java.awt.Color(102, 102, 255));
        rename.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        rename.setText("RENAME FILE");
        rename.setBorder(delete.getBorder());
        rename.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                renameActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 3, 12)); // NOI18N
        jLabel1.setText("      DISPLAY");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("INPUT NEW FILE NAME");

        copy.setBackground(new java.awt.Color(102, 102, 255));
        copy.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        copy.setText("COPY FILE");
        copy.setBorder(delete.getBorder());
        copy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addGap(10, 10, 10))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(177, 177, 177)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rename))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(42, 42, 42)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(copy, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addComponent(newName, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(172, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(copy, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 66, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rename, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(newName, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(46, 46, 46))
        );

        jMenu1.setText("FILE");

        open.setText("open");
        open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openActionPerformed(evt);
            }
        });
        jMenu1.add(open);

        exit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        exit.setText("exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });
        jMenu1.add(exit);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void openActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openActionPerformed
        fileChooser.setFileSelectionMode(fileChooser.FILES_AND_DIRECTORIES);
        returnVal = fileChooser.showOpenDialog(this);
        if(returnVal == fileChooser.APPROVE_OPTION){
            file = fileChooser.getSelectedFile();
            try{
                //what to do with the file e.g display it in the text area
                //txtArea.read(new FileReader(file.getAbsolutePath()),);
                
                txtArea.setText(fileDesc(file));
            }catch(Exception ex){
                
            }
        }else{
            JOptionPane.showMessageDialog(null,"File access cancelled by user");
        }
    }//GEN-LAST:event_openActionPerformed

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed

        System.exit(0);
    }//GEN-LAST:event_exitActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
       // int returnVal = fileChooser.showOpenDialog(this);
        if(txtArea.getLineCount()==1)
            JOptionPane.showMessageDialog(null,("No File Was Selected"));
        else
        {   int val = JOptionPane.showConfirmDialog(jPanel1,"Are you sure you want to"
                    + " delete this file?","Confirm Delete",JOptionPane.YES_NO_OPTION);
            if (val==JOptionPane.YES_OPTION)
            {   
                boolean stat = file.delete();
                if(stat){
                    JOptionPane.showMessageDialog(null,(file.getName()+" Deleted Succesfully"));
                    reset();
                }else
                    JOptionPane.showMessageDialog(null,("Unable to delete "+file.getName()),"Delete Action",JOptionPane.ERROR_MESSAGE);

            }else
                JOptionPane.showMessageDialog(null,"Delete cancelled");
        }
    }//GEN-LAST:event_deleteActionPerformed

    private void copyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyActionPerformed
       
        try {
            if(txtArea.getLineCount()==1)
                JOptionPane.showMessageDialog(null,("No File Was Selected"));
            else
            {    fileChooser.setFileSelectionMode(fileChooser.DIRECTORIES_ONLY);
                returnVal = fileChooser.showDialog(jPanel1,"Select");
                if(returnVal == fileChooser.APPROVE_OPTION){
                    File files = new File(fileChooser.getSelectedFile(),file.getName());
                    txtArea.append("\n\nNEW FILE\n"+fileDesc(files));
                    Files.copy(file.toPath(), files.toPath(),StandardCopyOption.REPLACE_EXISTING);
                    file=files;
                }
                else
                    JOptionPane.showMessageDialog(null,"File access cancelled by user");
            }
        } catch (Exception ex) {
          
        }
        
    }//GEN-LAST:event_copyActionPerformed

    private void renameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_renameActionPerformed
        try{
            fileChooser.showSaveDialog(null);
            if(newName.getText().trim().isEmpty())
            JOptionPane.showMessageDialog(null,("File name invalid "),"Rename Failed",JOptionPane.ERROR_MESSAGE);
            else
            {
                if(!fileChooser.getSelectedFile().equals(null))
                {   File files = new File(fileChooser.getCurrentDirectory(),newName.getText()+fileExt(file));
                    boolean stat = file.renameTo(files);
                    if(stat)
                    {
                        JOptionPane.showMessageDialog(null,fileChooser.getCurrentDirectory()+" File rename is "+stat);
                        txtArea.setText(fileDesc(files));
                        file=files;
                    }else
                    JOptionPane.showMessageDialog(null,("Error Renaming "+file.getName()),"Rename Failed",JOptionPane.ERROR_MESSAGE);
                }
                else
                JOptionPane.showMessageDialog(null,"No file Selected");
            }

        }catch(Exception e){  }
    }//GEN-LAST:event_renameActionPerformed
    
    public String fileExt(File file){
        int i= file.getName().lastIndexOf('.');
        if(i>0)
           return "."+file.getName().substring(i+1);
        else
            return "";
    }
    
    public String fileDesc(File file){
        String desc = ("     FILE CHOSEN PROPERTIES"
                        +"\n*File Name: " + file.getName()
                        +"\n*File Path: "+file.getPath()
                        +"\n*isWritable: "+file.canWrite()
                        +"\n*isReadable: "+file.canRead()
                        +"\n*isDirectory: "+file.isDirectory()
                        +"\n*isFile: "+file.isFile()
                        );
        return desc;
    }
    
    public void reset(){
        txtArea.setText("");
        fileChooser.setSelectedFile(null);
    }
    /**
     * @param args the command line arguments   
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(filing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(filing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(filing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(filing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new filing().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton copy;
    private javax.swing.JButton delete;
    private javax.swing.JMenuItem exit;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField newName;
    private javax.swing.JMenuItem open;
    private javax.swing.JPopupMenu popp;
    private javax.swing.JButton rename;
    private javax.swing.JTextArea txtArea;
    // End of variables declaration//GEN-END:variables
}

class MyCustomFilter extends javax.swing.filechooser.FileFilter{
    @Override
    public boolean accept(File file){
        //this allow only directories or files with '.txt' extension
        return file.isDirectory()||file.getAbsolutePath().endsWith(".txt");
    }
    @Override
    public String getDescription(){
        //this description will be displayed in the dialog
        //hard-coded = ugly ,should be done via I18N
        return "Text documents(*.txt)";
    }
}

//File filed = File.createTempFile("trips", ".txt",fileChooser.getCurrentDirectory());
        //fileChooser.setSelectedFile(files);
        //fileChooser.setFileSelectionMode(fileChooser.DIRECTORIES_ONLY);
        //fileChooser.setSelectedFile(file);
       //fileChooser.setSelectedFile(fileChooser.getCurrentDirectory());
